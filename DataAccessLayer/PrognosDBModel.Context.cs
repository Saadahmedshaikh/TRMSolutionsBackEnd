//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer
{
    using global::System.Data.Entity;
    using global::System.Data.Entity.Infrastructure;
    using global::System.Data.Entity.Core.Objects;
    using global::System.Linq;
    using global::System;

    public partial class PrognosDBContext : DbContext
    {
        public PrognosDBContext()
            : base("name=PrognosDBContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AlertModule> AlertModule { get; set; }
        public virtual DbSet<AlertModulePermission> AlertModulePermission { get; set; }
        public virtual DbSet<AssetGroup> AssetGroup { get; set; }
        public virtual DbSet<AssetTransferRequest> AssetTransferRequest { get; set; }
        public virtual DbSet<ATRAttachedDocument> ATRAttachedDocument { get; set; }
        public virtual DbSet<ATRENode> ATRENode { get; set; }
        public virtual DbSet<ATREquipmentDetail> ATREquipmentDetail { get; set; }
        public virtual DbSet<ATRFilledQuestion> ATRFilledQuestion { get; set; }
        public virtual DbSet<ATRLevelBasePriority> ATRLevelBasePriority { get; set; }
        public virtual DbSet<ATRNotificationLog> ATRNotificationLog { get; set; }
        public virtual DbSet<ATRQuestionsSet> ATRQuestionsSet { get; set; }
        public virtual DbSet<ATRReviewedRequest> ATRReviewedRequest { get; set; }
        public virtual DbSet<ATRRoutingLevel> ATRRoutingLevel { get; set; }
        public virtual DbSet<ATRRoutingLog> ATRRoutingLog { get; set; }
        public virtual DbSet<ATRRoutingLogAction> ATRRoutingLogAction { get; set; }
        public virtual DbSet<ATRUserDefinedRouting> ATRUserDefinedRouting { get; set; }
        public virtual DbSet<BD_ReqRigEqDetails> BD_ReqRigEqDetails { get; set; }
        public virtual DbSet<BD_Requests> BD_Requests { get; set; }
        public virtual DbSet<BD_RigEqDoc> BD_RigEqDoc { get; set; }
        public virtual DbSet<BulkAddLog> BulkAddLog { get; set; }
        public virtual DbSet<CalibrationRegister> CalibrationRegister { get; set; }
        public virtual DbSet<CategorySpecification> CategorySpecification { get; set; }
        public virtual DbSet<ClientSynchronizations> ClientSynchronizations { get; set; }
        public virtual DbSet<Color> Color { get; set; }
        public virtual DbSet<ColorCode> ColorCode { get; set; }
        public virtual DbSet<CompanyMiscellaneousRigEquipmentAttribute> CompanyMiscellaneousRigEquipmentAttribute { get; set; }
        public virtual DbSet<CompanyMiscellaneousRigEquipmentDocumentAttribute> CompanyMiscellaneousRigEquipmentDocumentAttribute { get; set; }
        public virtual DbSet<CompanyRMRAttribute> CompanyRMRAttribute { get; set; }
        public virtual DbSet<ConflictingPMServiceFormDefination> ConflictingPMServiceFormDefination { get; set; }
        public virtual DbSet<ControlType> ControlType { get; set; }
        public virtual DbSet<DailyActivityReport> DailyActivityReport { get; set; }
        public virtual DbSet<DailyActivityReportDetails> DailyActivityReportDetails { get; set; }
        public virtual DbSet<DailyLog> DailyLog { get; set; }
        public virtual DbSet<DailyLogBOPPressure> DailyLogBOPPressure { get; set; }
        public virtual DbSet<DataImportHistory> DataImportHistory { get; set; }
        public virtual DbSet<DataType> DataType { get; set; }
        public virtual DbSet<Documents> Documents { get; set; }
        public virtual DbSet<DocumentType> DocumentType { get; set; }
        public virtual DbSet<EngineeringRequest> EngineeringRequest { get; set; }
        public virtual DbSet<EngineeringRequestCCNotification> EngineeringRequestCCNotification { get; set; }
        public virtual DbSet<Equipment> Equipment { get; set; }
        public virtual DbSet<Equipment_1> Equipment_1 { get; set; }
        public virtual DbSet<EquipmentCategory> EquipmentCategory { get; set; }
        public virtual DbSet<EquipmentCriticality> EquipmentCriticality { get; set; }
        public virtual DbSet<EquipmentDocument> EquipmentDocument { get; set; }
        public virtual DbSet<EquipmentOneTimeJobs> EquipmentOneTimeJobs { get; set; }
        public virtual DbSet<EquipmentOneTimeJobTasks> EquipmentOneTimeJobTasks { get; set; }
        public virtual DbSet<EquipmentSchedule> EquipmentSchedule { get; set; }
        public virtual DbSet<EquipmentSchedule_1> EquipmentSchedule_1 { get; set; }
        public virtual DbSet<EquipmentSpecification> EquipmentSpecification { get; set; }
        public virtual DbSet<EquipmentSpecification_backup> EquipmentSpecification_backup { get; set; }
        public virtual DbSet<EquipmentSpecsCategory> EquipmentSpecsCategory { get; set; }
        public virtual DbSet<EquipmentTransferHistoryLog> EquipmentTransferHistoryLog { get; set; }
        public virtual DbSet<ExRegister> ExRegister { get; set; }
        public virtual DbSet<ExRegisterDetails> ExRegisterDetails { get; set; }
        public virtual DbSet<ExRegisterDetailsCopy> ExRegisterDetailsCopy { get; set; }
        public virtual DbSet<ExRegisterDetailsHistory> ExRegisterDetailsHistory { get; set; }
        public virtual DbSet<ExRegisterDetailsUpdate> ExRegisterDetailsUpdate { get; set; }
        public virtual DbSet<FaultGroup> FaultGroup { get; set; }
        public virtual DbSet<FleetCoordinates> FleetCoordinates { get; set; }
        public virtual DbSet<FormTypes> FormTypes { get; set; }
        public virtual DbSet<GraphType> GraphType { get; set; }
        public virtual DbSet<IACDCodes> IACDCodes { get; set; }
        public virtual DbSet<ImprovementCommitment> ImprovementCommitment { get; set; }
        public virtual DbSet<Jobs> Jobs { get; set; }
        public virtual DbSet<JobsCompletedByCleanUpProc> JobsCompletedByCleanUpProc { get; set; }
        public virtual DbSet<Language> Language { get; set; }
        public virtual DbSet<LiftingGearRegister> LiftingGearRegister { get; set; }
        public virtual DbSet<LiftingGearRegisterDetails> LiftingGearRegisterDetails { get; set; }
        public virtual DbSet<LocalizedResource> LocalizedResource { get; set; }
        public virtual DbSet<MaterialTransferDetails> MaterialTransferDetails { get; set; }
        public virtual DbSet<MaterialTransferHistoryLog> MaterialTransferHistoryLog { get; set; }
        public virtual DbSet<MiscellaneousEquipmentDocumentType> MiscellaneousEquipmentDocumentType { get; set; }
        public virtual DbSet<MiscellaneousRigEquipment> MiscellaneousRigEquipment { get; set; }
        public virtual DbSet<MiscellaneousRigEquipmentAttribute> MiscellaneousRigEquipmentAttribute { get; set; }
        public virtual DbSet<MiscellaneousRigEquipmentDocument> MiscellaneousRigEquipmentDocument { get; set; }
        public virtual DbSet<MiscellaneousRigEquipmentDocumentAttribute> MiscellaneousRigEquipmentDocumentAttribute { get; set; }
        public virtual DbSet<MiscellaneousRigEquipmentDropDownDefaultValue> MiscellaneousRigEquipmentDropDownDefaultValue { get; set; }
        public virtual DbSet<MiscellaneousRigEquipmentSpecification> MiscellaneousRigEquipmentSpecification { get; set; }
        public virtual DbSet<MorningReport> MorningReport { get; set; }
        public virtual DbSet<MorningReportOperations> MorningReportOperations { get; set; }
        public virtual DbSet<MorningReportTrainings> MorningReportTrainings { get; set; }
        public virtual DbSet<OilInventory> OilInventory { get; set; }
        public virtual DbSet<OrgRole> OrgRole { get; set; }
        public virtual DbSet<OrgUnit> OrgUnit { get; set; }
        public virtual DbSet<OrgUnitType> OrgUnitType { get; set; }
        public virtual DbSet<OrgUserRole> OrgUserRole { get; set; }
        public virtual DbSet<PermissionBaseUserNotification> PermissionBaseUserNotification { get; set; }
        public virtual DbSet<PermissionType> PermissionType { get; set; }
        public virtual DbSet<PMDiagram> PMDiagram { get; set; }
        public virtual DbSet<PMDiagramFields> PMDiagramFields { get; set; }
        public virtual DbSet<PMDiagramValue> PMDiagramValue { get; set; }
        public virtual DbSet<PMProcedure> PMProcedure { get; set; }
        public virtual DbSet<PMProcedureFields> PMProcedureFields { get; set; }
        public virtual DbSet<PMProcedureValue> PMProcedureValue { get; set; }
        public virtual DbSet<PMServiceFormDefinition> PMServiceFormDefinition { get; set; }
        public virtual DbSet<PMServiceForms> PMServiceForms { get; set; }
        public virtual DbSet<PMServiceFormSection> PMServiceFormSection { get; set; }
        public virtual DbSet<PMServiceFormSectionDiagrams> PMServiceFormSectionDiagrams { get; set; }
        public virtual DbSet<PMServiceFormSectionProcedures> PMServiceFormSectionProcedures { get; set; }
        public virtual DbSet<PressureVesselRegister> PressureVesselRegister { get; set; }
        public virtual DbSet<PressureVesselRegisterDetails> PressureVesselRegisterDetails { get; set; }
        public virtual DbSet<ProcessStatus> ProcessStatus { get; set; }
        public virtual DbSet<RaisedRMRAttribute> RaisedRMRAttribute { get; set; }
        public virtual DbSet<RaisedRMRDocument> RaisedRMRDocument { get; set; }
        public virtual DbSet<RaisedRMRRoutingEscalation> RaisedRMRRoutingEscalation { get; set; }
        public virtual DbSet<RamsAlert> RamsAlert { get; set; }
        public virtual DbSet<RAMSAssetRegister> RAMSAssetRegister { get; set; }
        public virtual DbSet<ReleifValveRegister> ReleifValveRegister { get; set; }
        public virtual DbSet<ReleifValveRegisterDetails> ReleifValveRegisterDetails { get; set; }
        public virtual DbSet<ReportFiles> ReportFiles { get; set; }
        public virtual DbSet<ReportFilesTab> ReportFilesTab { get; set; }
        public virtual DbSet<ReportTab> ReportTab { get; set; }
        public virtual DbSet<ReportTabSecUSerGroup> ReportTabSecUSerGroup { get; set; }
        public virtual DbSet<ResourceTranslation> ResourceTranslation { get; set; }
        public virtual DbSet<RigDetails> RigDetails { get; set; }
        public virtual DbSet<RigDetails_1> RigDetails_1 { get; set; }
        public virtual DbSet<RigDetailsHistoryLog> RigDetailsHistoryLog { get; set; }
        public virtual DbSet<RigEq_18MonthsJobPlan> RigEq_18MonthsJobPlan { get; set; }
        public virtual DbSet<RigEq_18MonthsPlanDetails> RigEq_18MonthsPlanDetails { get; set; }
        public virtual DbSet<RigEquipment> RigEquipment { get; set; }
        public virtual DbSet<RigEquipment_1> RigEquipment_1 { get; set; }
        public virtual DbSet<RigEquipmentDocuments> RigEquipmentDocuments { get; set; }
        public virtual DbSet<RigEquipmentHours> RigEquipmentHours { get; set; }
        public virtual DbSet<RigEquipmentInspections> RigEquipmentInspections { get; set; }
        public virtual DbSet<RigEquipmentOneTimeJob> RigEquipmentOneTimeJob { get; set; }
        public virtual DbSet<RigEquipmentOneTimeJobTasks> RigEquipmentOneTimeJobTasks { get; set; }
        public virtual DbSet<RigEquipmentOverallHours> RigEquipmentOverallHours { get; set; }
        public virtual DbSet<RigEquipmentParentFamily> RigEquipmentParentFamily { get; set; }
        public virtual DbSet<RigEquipmentSchedule> RigEquipmentSchedule { get; set; }
        public virtual DbSet<RigEquipmentSchedule_1> RigEquipmentSchedule_1 { get; set; }
        public virtual DbSet<RigEquipmentScheduleJobs> RigEquipmentScheduleJobs { get; set; }
        public virtual DbSet<RigEquipmentSpecification> RigEquipmentSpecification { get; set; }
        public virtual DbSet<RigEquipmentSpecification_Backup> RigEquipmentSpecification_Backup { get; set; }
        public virtual DbSet<RigEquipmentSpecificationTemplate> RigEquipmentSpecificationTemplate { get; set; }
        public virtual DbSet<RigEquipmentTransferDetails> RigEquipmentTransferDetails { get; set; }
        public virtual DbSet<RigEquipmentUnscheduledRepairDetails> RigEquipmentUnscheduledRepairDetails { get; set; }
        public virtual DbSet<RigEquipmentUnscheduledRepairs> RigEquipmentUnscheduledRepairs { get; set; }
        public virtual DbSet<RigModificationRequest> RigModificationRequest { get; set; }
        public virtual DbSet<RigRepairAlerts> RigRepairAlerts { get; set; }
        public virtual DbSet<RigStatusLog> RigStatusLog { get; set; }
        public virtual DbSet<RMRActionLog> RMRActionLog { get; set; }
        public virtual DbSet<RMRSuperordinateRoutingHierarchy> RMRSuperordinateRoutingHierarchy { get; set; }
        public virtual DbSet<ScheduleBasis> ScheduleBasis { get; set; }
        public virtual DbSet<ScheduleType> ScheduleType { get; set; }
        public virtual DbSet<ScriptsRepository> ScriptsRepository { get; set; }
        public virtual DbSet<SecActivityLog> SecActivityLog { get; set; }
        public virtual DbSet<SecActivityLogDetail> SecActivityLogDetail { get; set; }
        public virtual DbSet<SecApplication> SecApplication { get; set; }
        public virtual DbSet<SecPasswordHistory> SecPasswordHistory { get; set; }
        public virtual DbSet<SecPermission> SecPermission { get; set; }
        public virtual DbSet<SecPolicy> SecPolicy { get; set; }
        public virtual DbSet<SecPolicyGroup> SecPolicyGroup { get; set; }
        public virtual DbSet<SecUser> SecUser { get; set; }
        public virtual DbSet<SecUserGroup> SecUserGroup { get; set; }
        public virtual DbSet<SecUserGroupPermission> SecUserGroupPermission { get; set; }
        public virtual DbSet<SecUserGroupRelation> SecUserGroupRelation { get; set; }
        public virtual DbSet<SecUserStatus> SecUserStatus { get; set; }
        public virtual DbSet<SecUserUserGroup> SecUserUserGroup { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<System> System { get; set; }
        public virtual DbSet<tbl_locations> tbl_locations { get; set; }
        public virtual DbSet<ToDoList> ToDoList { get; set; }
        public virtual DbSet<UserEmailNotification> UserEmailNotification { get; set; }
        public virtual DbSet<UserMeasurementAlerts> UserMeasurementAlerts { get; set; }
        public virtual DbSet<UserNotificationType> UserNotificationType { get; set; }
        public virtual DbSet<WebDropdownValue> WebDropdownValue { get; set; }
        public virtual DbSet<WebInterface> WebInterface { get; set; }
        public virtual DbSet<WebInterfaceAccessRole> WebInterfaceAccessRole { get; set; }
        public virtual DbSet<WebJobs> WebJobs { get; set; }
        public virtual DbSet<WebRouting> WebRouting { get; set; }
        public virtual DbSet<WebView> WebView { get; set; }
        public virtual DbSet<WebViewOrgRolePreviledge> WebViewOrgRolePreviledge { get; set; }
        public virtual DbSet<AssetGroup_TombStone> AssetGroup_TombStone { get; set; }
        public virtual DbSet<AssetGroup_Tombstone_Temp> AssetGroup_Tombstone_Temp { get; set; }
        public virtual DbSet<CategorySpecification_TombStone> CategorySpecification_TombStone { get; set; }
        public virtual DbSet<ColorCode_TombStone> ColorCode_TombStone { get; set; }
        public virtual DbSet<Dec14_PMDiagramValue> Dec14_PMDiagramValue { get; set; }
        public virtual DbSet<Dec14_PMProcedureValue> Dec14_PMProcedureValue { get; set; }
        public virtual DbSet<Dec14_PMServiceForms> Dec14_PMServiceForms { get; set; }
        public virtual DbSet<Dec14_RigEquipmentScheduleJobs_DeletedByQuery> Dec14_RigEquipmentScheduleJobs_DeletedByQuery { get; set; }
        public virtual DbSet<Dec14_UserMeasurementAlerts> Dec14_UserMeasurementAlerts { get; set; }
        public virtual DbSet<Documents_bk> Documents_bk { get; set; }
        public virtual DbSet<Documents_duplicateDocs> Documents_duplicateDocs { get; set; }
        public virtual DbSet<EquipmentCategory_TombStone> EquipmentCategory_TombStone { get; set; }
        public virtual DbSet<EquipmentDocument_bk> EquipmentDocument_bk { get; set; }
        public virtual DbSet<EquipmentDocument_duplicateDocs> EquipmentDocument_duplicateDocs { get; set; }
        public virtual DbSet<EquipmentDocument_TombStone> EquipmentDocument_TombStone { get; set; }
        public virtual DbSet<EquipmentSchedule_TombStone> EquipmentSchedule_TombStone { get; set; }
        public virtual DbSet<EquipmentSpecsCategory_TombStone> EquipmentSpecsCategory_TombStone { get; set; }
        public virtual DbSet<EquipmentTemp> EquipmentTemp { get; set; }
        public virtual DbSet<ICR_tmp> ICR_tmp { get; set; }
        public virtual DbSet<ImprovementCommitment_bk> ImprovementCommitment_bk { get; set; }
        public virtual DbSet<ImprovementCommitment_TombStone1> ImprovementCommitment_TombStone1 { get; set; }
        public virtual DbSet<LocalizedResource_TombStone> LocalizedResource_TombStone { get; set; }
        public virtual DbSet<MorningReport_march232017> MorningReport_march232017 { get; set; }
        public virtual DbSet<morningreport_scriptTable> morningreport_scriptTable { get; set; }
        public virtual DbSet<MorningReportSchedule> MorningReportSchedule { get; set; }
        public virtual DbSet<mr> mr { get; set; }
        public virtual DbSet<mro> mro { get; set; }
        public virtual DbSet<NPT72Hours> NPT72Hours { get; set; }
        public virtual DbSet<Old_EquipmentSchedule_Tombstone> Old_EquipmentSchedule_Tombstone { get; set; }
        public virtual DbSet<Old_LocalizedResource_TombStone> Old_LocalizedResource_TombStone { get; set; }
        public virtual DbSet<Old_OrgUserRole_TombStone> Old_OrgUserRole_TombStone { get; set; }
        public virtual DbSet<Old_PMServiceFormSectionProcedures_TombStone> Old_PMServiceFormSectionProcedures_TombStone { get; set; }
        public virtual DbSet<Old_SecUserUserGroup_TombStone> Old_SecUserUserGroup_TombStone { get; set; }
        public virtual DbSet<OrgUserRole_bk> OrgUserRole_bk { get; set; }
        public virtual DbSet<OrgUserRole_scriptTable> OrgUserRole_scriptTable { get; set; }
        public virtual DbSet<OrgUserRole_TombStone> OrgUserRole_TombStone { get; set; }
        public virtual DbSet<PMDiagram_TombStone> PMDiagram_TombStone { get; set; }
        public virtual DbSet<PMDiagramFields_TombStone> PMDiagramFields_TombStone { get; set; }
        public virtual DbSet<PMProcedure_TombStone> PMProcedure_TombStone { get; set; }
        public virtual DbSet<PMProcedureFields_TombStone> PMProcedureFields_TombStone { get; set; }
        public virtual DbSet<pmserviceforms_26032017> pmserviceforms_26032017 { get; set; }
        public virtual DbSet<PMServiceFormSection_TombStone> PMServiceFormSection_TombStone { get; set; }
        public virtual DbSet<PMServiceFormSectionDiagrams_TombStone> PMServiceFormSectionDiagrams_TombStone { get; set; }
        public virtual DbSet<PMServiceFormSectionProcedures_TombStone> PMServiceFormSectionProcedures_TombStone { get; set; }
        public virtual DbSet<QueryText> QueryText { get; set; }
        public virtual DbSet<ResourceTranslation_TombStone> ResourceTranslation_TombStone { get; set; }
        public virtual DbSet<RigEq_18Month_OverhaulPlanDetail> RigEq_18Month_OverhaulPlanDetail { get; set; }
        public virtual DbSet<RigEquipment_bk> RigEquipment_bk { get; set; }
        public virtual DbSet<RigEquipment_temp> RigEquipment_temp { get; set; }
        public virtual DbSet<RigEquipmentScheduleBkup> RigEquipmentScheduleBkup { get; set; }
        public virtual DbSet<RigEquipmentSuspension> RigEquipmentSuspension { get; set; }
        public virtual DbSet<RigEquipmentUnscheduledRepairDetails_TombStone> RigEquipmentUnscheduledRepairDetails_TombStone { get; set; }
        public virtual DbSet<SECUSER_bk> SECUSER_bk { get; set; }
        public virtual DbSet<SecUserGroup_TombStone> SecUserGroup_TombStone { get; set; }
        public virtual DbSet<SecUserGroupPermission_MtrBck> SecUserGroupPermission_MtrBck { get; set; }
        public virtual DbSet<SecUserGroupPermission_TombStone> SecUserGroupPermission_TombStone { get; set; }
        public virtual DbSet<SecUserUserGroup_TombStone> SecUserUserGroup_TombStone { get; set; }
        public virtual DbSet<System_TombStone> System_TombStone { get; set; }
        public virtual DbSet<System_TombStone_23June2010select> System_TombStone_23June2010select { get; set; }
        public virtual DbSet<tempTableDocuments> tempTableDocuments { get; set; }
        public virtual DbSet<Test> Test { get; set; }
        public virtual DbSet<Test_PMServiceForms> Test_PMServiceForms { get; set; }
        public virtual DbSet<Test_RigEquipmentScheduleJobs> Test_RigEquipmentScheduleJobs { get; set; }
        public virtual DbSet<UserMeasurementAlerts_bk> UserMeasurementAlerts_bk { get; set; }
        public virtual DbSet<DuplicateJobDetails> DuplicateJobDetails { get; set; }
        public virtual DbSet<DuplicateJobSummary> DuplicateJobSummary { get; set; }
        public virtual DbSet<MR_FuelUsageDetails> MR_FuelUsageDetails { get; set; }
        public virtual DbSet<vwGeneratorDetailSpecifications> vwGeneratorDetailSpecifications { get; set; }
        public virtual DbSet<vwPMFormsWithEquipmentNameConflicts_Details> vwPMFormsWithEquipmentNameConflicts_Details { get; set; }
        public virtual DbSet<vwPMFormsWithEquipmentNameConflicts_Summary> vwPMFormsWithEquipmentNameConflicts_Summary { get; set; }
    
        [DbFunction("PrognosDBContext", "Split")]
        public virtual IQueryable<Split_Result> Split(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Result>("[PrognosDBContext].[Split](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<Nullable<Guid>> AddProcedureFields()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<Guid>>("AddProcedureFields");
        }
    
        public virtual ObjectResult<analysis_CheckForColumnUniqueValuesIssues_Result> analysis_CheckForColumnUniqueValuesIssues()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<analysis_CheckForColumnUniqueValuesIssues_Result>("analysis_CheckForColumnUniqueValuesIssues");
        }
    
        public virtual int analysis_Schedules()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("analysis_Schedules");
        }
    
        public virtual ObjectResult<ATR_FETCH_RIG_EQUIPMENT_Result> ATR_FETCH_RIG_EQUIPMENT(string orgUnitID)
        {
            var orgUnitIDParameter = orgUnitID != null ?
                new ObjectParameter("OrgUnitID", orgUnitID) :
                new ObjectParameter("OrgUnitID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ATR_FETCH_RIG_EQUIPMENT_Result>("ATR_FETCH_RIG_EQUIPMENT", orgUnitIDParameter);
        }
    
        public virtual int CleanUpJobs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CleanUpJobs");
        }
    
        public virtual int CreatCleanUpScriptForRigs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreatCleanUpScriptForRigs");
        }
    
        public virtual int CreateQuery(string oldPMServiceFormDefinitionID, string newPMServiceFormDefinitionID, string pMServiceFormID, string formName)
        {
            var oldPMServiceFormDefinitionIDParameter = oldPMServiceFormDefinitionID != null ?
                new ObjectParameter("OldPMServiceFormDefinitionID", oldPMServiceFormDefinitionID) :
                new ObjectParameter("OldPMServiceFormDefinitionID", typeof(string));
    
            var newPMServiceFormDefinitionIDParameter = newPMServiceFormDefinitionID != null ?
                new ObjectParameter("NewPMServiceFormDefinitionID", newPMServiceFormDefinitionID) :
                new ObjectParameter("NewPMServiceFormDefinitionID", typeof(string));
    
            var pMServiceFormIDParameter = pMServiceFormID != null ?
                new ObjectParameter("PMServiceFormID", pMServiceFormID) :
                new ObjectParameter("PMServiceFormID", typeof(string));
    
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateQuery", oldPMServiceFormDefinitionIDParameter, newPMServiceFormDefinitionIDParameter, pMServiceFormIDParameter, formNameParameter);
        }
    
        public virtual int CreateUserScriptForRig()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateUserScriptForRig");
        }
    
        public virtual int DailyLog_AutoCorrect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DailyLog_AutoCorrect");
        }
    
        public virtual int DeleteExtraSpecifications()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteExtraSpecifications");
        }
    
        public virtual int Fetch_MiscellaneousRigEquipment(Nullable<int> condition, Nullable<Guid> rigID, Nullable<Guid> countryID, Nullable<Guid> equimentCategoryID, Nullable<Guid> equimentID, Nullable<Guid> miscRigEquimentID, Nullable<Guid> rigEquimentID, string loginID)
        {
            var conditionParameter = condition.HasValue ?
                new ObjectParameter("Condition", condition) :
                new ObjectParameter("Condition", typeof(int));
    
            var rigIDParameter = rigID.HasValue ?
                new ObjectParameter("RigID", rigID) :
                new ObjectParameter("RigID", typeof(Guid));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(Guid));
    
            var equimentCategoryIDParameter = equimentCategoryID.HasValue ?
                new ObjectParameter("EquimentCategoryID", equimentCategoryID) :
                new ObjectParameter("EquimentCategoryID", typeof(Guid));
    
            var equimentIDParameter = equimentID.HasValue ?
                new ObjectParameter("EquimentID", equimentID) :
                new ObjectParameter("EquimentID", typeof(Guid));
    
            var miscRigEquimentIDParameter = miscRigEquimentID.HasValue ?
                new ObjectParameter("MiscRigEquimentID", miscRigEquimentID) :
                new ObjectParameter("MiscRigEquimentID", typeof(Guid));
    
            var rigEquimentIDParameter = rigEquimentID.HasValue ?
                new ObjectParameter("RigEquimentID", rigEquimentID) :
                new ObjectParameter("RigEquimentID", typeof(Guid));
    
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Fetch_MiscellaneousRigEquipment", conditionParameter, rigIDParameter, countryIDParameter, equimentCategoryIDParameter, equimentIDParameter, miscRigEquimentIDParameter, rigEquimentIDParameter, loginIDParameter);
        }
    
        public virtual int FindScheduleJobs(string rigName)
        {
            var rigNameParameter = rigName != null ?
                new ObjectParameter("rigName", rigName) :
                new ObjectParameter("rigName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FindScheduleJobs", rigNameParameter);
        }
    
        public virtual ObjectResult<FindScheduleJobs_Main_Result> FindScheduleJobs_Main()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindScheduleJobs_Main_Result>("FindScheduleJobs_Main");
        }
    
        public virtual int import_Diagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("import_Diagrams");
        }
    
        public virtual int LongPrint(string @string)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LongPrint", stringParameter);
        }
    
        public virtual int MakeMigrationScript(string objname)
        {
            var objnameParameter = objname != null ?
                new ObjectParameter("objname", objname) :
                new ObjectParameter("objname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MakeMigrationScript", objnameParameter);
        }
    
        public virtual ObjectResult<PakistanWeeklyReport_Result> PakistanWeeklyReport(Nullable<DateTime> from_dt, Nullable<DateTime> to_dt, Nullable<Guid> countryID)
        {
            var from_dtParameter = from_dt.HasValue ?
                new ObjectParameter("from_dt", from_dt) :
                new ObjectParameter("from_dt", typeof(DateTime));
    
            var to_dtParameter = to_dt.HasValue ?
                new ObjectParameter("to_dt", to_dt) :
                new ObjectParameter("to_dt", typeof(DateTime));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PakistanWeeklyReport_Result>("PakistanWeeklyReport", from_dtParameter, to_dtParameter, countryIDParameter);
        }
    
        public virtual int QualityReport_PMStatus1095Days(Nullable<DateTime> cur_dt)
        {
            var cur_dtParameter = cur_dt.HasValue ?
                new ObjectParameter("cur_dt", cur_dt) :
                new ObjectParameter("cur_dt", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QualityReport_PMStatus1095Days", cur_dtParameter);
        }
    
        public virtual int QualityReport_PMStatus1095DaysForSpecificAssetGroups(Nullable<DateTime> cur_dt)
        {
            var cur_dtParameter = cur_dt.HasValue ?
                new ObjectParameter("cur_dt", cur_dt) :
                new ObjectParameter("cur_dt", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QualityReport_PMStatus1095DaysForSpecificAssetGroups", cur_dtParameter);
        }
    
        public virtual int QualityReport_PMStatus180Days(Nullable<DateTime> cur_dt)
        {
            var cur_dtParameter = cur_dt.HasValue ?
                new ObjectParameter("cur_dt", cur_dt) :
                new ObjectParameter("cur_dt", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QualityReport_PMStatus180Days", cur_dtParameter);
        }
    
        public virtual int QualityReport_PMStatus180DaysForSpecificAssetGroups(Nullable<DateTime> cur_dt)
        {
            var cur_dtParameter = cur_dt.HasValue ?
                new ObjectParameter("cur_dt", cur_dt) :
                new ObjectParameter("cur_dt", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QualityReport_PMStatus180DaysForSpecificAssetGroups", cur_dtParameter);
        }
    
        public virtual int QualityReport_PMStatus1825Days(Nullable<DateTime> cur_dt)
        {
            var cur_dtParameter = cur_dt.HasValue ?
                new ObjectParameter("cur_dt", cur_dt) :
                new ObjectParameter("cur_dt", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QualityReport_PMStatus1825Days", cur_dtParameter);
        }
    
        public virtual int QualityReport_PMStatus1825DaysForSpecificAssetGroups(Nullable<DateTime> cur_dt)
        {
            var cur_dtParameter = cur_dt.HasValue ?
                new ObjectParameter("cur_dt", cur_dt) :
                new ObjectParameter("cur_dt", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QualityReport_PMStatus1825DaysForSpecificAssetGroups", cur_dtParameter);
        }
    
        public virtual int QualityReport_PMStatus30Days(Nullable<DateTime> cur_dt)
        {
            var cur_dtParameter = cur_dt.HasValue ?
                new ObjectParameter("cur_dt", cur_dt) :
                new ObjectParameter("cur_dt", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QualityReport_PMStatus30Days", cur_dtParameter);
        }
    
        public virtual int QualityReport_PMStatus30DaysForSpecificAssetGroups(Nullable<DateTime> cur_dt)
        {
            var cur_dtParameter = cur_dt.HasValue ?
                new ObjectParameter("cur_dt", cur_dt) :
                new ObjectParameter("cur_dt", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QualityReport_PMStatus30DaysForSpecificAssetGroups", cur_dtParameter);
        }
    
        public virtual int QualityReport_PMStatus365Days(Nullable<DateTime> cur_dt)
        {
            var cur_dtParameter = cur_dt.HasValue ?
                new ObjectParameter("cur_dt", cur_dt) :
                new ObjectParameter("cur_dt", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QualityReport_PMStatus365Days", cur_dtParameter);
        }
    
        public virtual int QualityReport_PMStatus365DaysForSpecificAssetGroups(Nullable<DateTime> cur_dt)
        {
            var cur_dtParameter = cur_dt.HasValue ?
                new ObjectParameter("cur_dt", cur_dt) :
                new ObjectParameter("cur_dt", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QualityReport_PMStatus365DaysForSpecificAssetGroups", cur_dtParameter);
        }
    
        public virtual int QualityReport_PMStatus90Days(Nullable<DateTime> cur_dt)
        {
            var cur_dtParameter = cur_dt.HasValue ?
                new ObjectParameter("cur_dt", cur_dt) :
                new ObjectParameter("cur_dt", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QualityReport_PMStatus90Days", cur_dtParameter);
        }
    
        public virtual int QualityReport_PMStatus90DaysForSpecificAssetGroups(Nullable<DateTime> cur_dt)
        {
            var cur_dtParameter = cur_dt.HasValue ?
                new ObjectParameter("cur_dt", cur_dt) :
                new ObjectParameter("cur_dt", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QualityReport_PMStatus90DaysForSpecificAssetGroups", cur_dtParameter);
        }
    
        public virtual int QualityReport_WorkloadStatus(Nullable<DateTime> from_dt, Nullable<DateTime> to_dt)
        {
            var from_dtParameter = from_dt.HasValue ?
                new ObjectParameter("from_dt", from_dt) :
                new ObjectParameter("from_dt", typeof(DateTime));
    
            var to_dtParameter = to_dt.HasValue ?
                new ObjectParameter("to_dt", to_dt) :
                new ObjectParameter("to_dt", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QualityReport_WorkloadStatus", from_dtParameter, to_dtParameter);
        }
    
        public virtual ObjectResult<QualityReport_WorkloadStatus_Main_Result> QualityReport_WorkloadStatus_Main(string interval)
        {
            var intervalParameter = interval != null ?
                new ObjectParameter("interval", interval) :
                new ObjectParameter("interval", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QualityReport_WorkloadStatus_Main_Result>("QualityReport_WorkloadStatus_Main", intervalParameter);
        }
    
        public virtual ObjectResult<QualityReport_WorkloadStatus_MainNewLogic_Result> QualityReport_WorkloadStatus_MainNewLogic(string interval)
        {
            var intervalParameter = interval != null ?
                new ObjectParameter("interval", interval) :
                new ObjectParameter("interval", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QualityReport_WorkloadStatus_MainNewLogic_Result>("QualityReport_WorkloadStatus_MainNewLogic", intervalParameter);
        }
    
        public virtual ObjectResult<QualityReport_WorkloadStatus_NEW_Result> QualityReport_WorkloadStatus_NEW(Nullable<int> interval)
        {
            var intervalParameter = interval.HasValue ?
                new ObjectParameter("interval", interval) :
                new ObjectParameter("interval", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QualityReport_WorkloadStatus_NEW_Result>("QualityReport_WorkloadStatus_NEW", intervalParameter);
        }
    
        public virtual ObjectResult<QualityReport_WorkloadStatus_Suspended_Result> QualityReport_WorkloadStatus_Suspended()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QualityReport_WorkloadStatus_Suspended_Result>("QualityReport_WorkloadStatus_Suspended");
        }
    
        public virtual ObjectResult<QualityReport_WorkloadStatusByCriticality_Result> QualityReport_WorkloadStatusByCriticality()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QualityReport_WorkloadStatusByCriticality_Result>("QualityReport_WorkloadStatusByCriticality");
        }
    
        public virtual ObjectResult<QualityReport_WorkloadStatusForSpecificAssetGroups_Result> QualityReport_WorkloadStatusForSpecificAssetGroups(Nullable<int> interval)
        {
            var intervalParameter = interval.HasValue ?
                new ObjectParameter("interval", interval) :
                new ObjectParameter("interval", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QualityReport_WorkloadStatusForSpecificAssetGroups_Result>("QualityReport_WorkloadStatusForSpecificAssetGroups", intervalParameter);
        }
    
        public virtual int QualityReport_WorkloadStatusNewLogic(Nullable<DateTime> from_dt, Nullable<DateTime> to_dt)
        {
            var from_dtParameter = from_dt.HasValue ?
                new ObjectParameter("from_dt", from_dt) :
                new ObjectParameter("from_dt", typeof(DateTime));
    
            var to_dtParameter = to_dt.HasValue ?
                new ObjectParameter("to_dt", to_dt) :
                new ObjectParameter("to_dt", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QualityReport_WorkloadStatusNewLogic", from_dtParameter, to_dtParameter);
        }
    
        public virtual int RefreshDatabaseUAT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RefreshDatabaseUAT");
        }
    
        public virtual ObjectResult<rigchildren_Result> rigchildren()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rigchildren_Result>("rigchildren");
        }
    
        public virtual int RigEquipmentScheduleSuspension(Nullable<Guid> sRigID)
        {
            var sRigIDParameter = sRigID.HasValue ?
                new ObjectParameter("sRigID", sRigID) :
                new ObjectParameter("sRigID", typeof(Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RigEquipmentScheduleSuspension", sRigIDParameter);
        }
    
        public virtual int RigEquipmentScheduleSuspension_UAT(Nullable<Guid> sRigID)
        {
            var sRigIDParameter = sRigID.HasValue ?
                new ObjectParameter("sRigID", sRigID) :
                new ObjectParameter("sRigID", typeof(Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RigEquipmentScheduleSuspension_UAT", sRigIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int SP_AssignAllRigEquipmentNameAndIsSpare()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AssignAllRigEquipmentNameAndIsSpare");
        }
    
        public virtual int SP_AssignRigEquipment(Nullable<Guid> orgUnitID, Nullable<Guid> equipmentID, Nullable<bool> update, ObjectParameter returnEquipmentName, ObjectParameter returnIsSpare)
        {
            var orgUnitIDParameter = orgUnitID.HasValue ?
                new ObjectParameter("OrgUnitID", orgUnitID) :
                new ObjectParameter("OrgUnitID", typeof(Guid));
    
            var equipmentIDParameter = equipmentID.HasValue ?
                new ObjectParameter("EquipmentID", equipmentID) :
                new ObjectParameter("EquipmentID", typeof(Guid));
    
            var updateParameter = update.HasValue ?
                new ObjectParameter("Update", update) :
                new ObjectParameter("Update", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AssignRigEquipment", orgUnitIDParameter, equipmentIDParameter, updateParameter, returnEquipmentName, returnIsSpare);
        }
    
        public virtual int SP_AssignRigEquipmentNameAndIsSpare(Nullable<Guid> orgUnitID, Nullable<Guid> equipmentID, Nullable<bool> update, ObjectParameter returnEquipmentName, ObjectParameter returnIsSpare)
        {
            var orgUnitIDParameter = orgUnitID.HasValue ?
                new ObjectParameter("OrgUnitID", orgUnitID) :
                new ObjectParameter("OrgUnitID", typeof(Guid));
    
            var equipmentIDParameter = equipmentID.HasValue ?
                new ObjectParameter("EquipmentID", equipmentID) :
                new ObjectParameter("EquipmentID", typeof(Guid));
    
            var updateParameter = update.HasValue ?
                new ObjectParameter("Update", update) :
                new ObjectParameter("Update", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AssignRigEquipmentNameAndIsSpare", orgUnitIDParameter, equipmentIDParameter, updateParameter, returnEquipmentName, returnIsSpare);
        }
    
        public virtual int SP_AssignRigEquipmentToSpare(Nullable<Guid> orgUnitID, Nullable<Guid> equipmentID, ObjectParameter returnEquipmentName, ObjectParameter returnIsSpare)
        {
            var orgUnitIDParameter = orgUnitID.HasValue ?
                new ObjectParameter("OrgUnitID", orgUnitID) :
                new ObjectParameter("OrgUnitID", typeof(Guid));
    
            var equipmentIDParameter = equipmentID.HasValue ?
                new ObjectParameter("EquipmentID", equipmentID) :
                new ObjectParameter("EquipmentID", typeof(Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AssignRigEquipmentToSpare", orgUnitIDParameter, equipmentIDParameter, returnEquipmentName, returnIsSpare);
        }
    
        public virtual int SP_CheckOnlineUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CheckOnlineUsers");
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<string> sp_CreateXML()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_CreateXML");
        }
    
        public virtual ObjectResult<SP_CurrentAndPreviousWeeklyReportByCountry_Result> SP_CurrentAndPreviousWeeklyReportByCountry(string country)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CurrentAndPreviousWeeklyReportByCountry_Result>("SP_CurrentAndPreviousWeeklyReportByCountry", countryParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_FuelUsageSummary_Result> sp_FuelUsageSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FuelUsageSummary_Result>("sp_FuelUsageSummary");
        }
    
        public virtual ObjectResult<SP_GetRigEquipmentSpecificationTemplate_Result> SP_GetRigEquipmentSpecificationTemplate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetRigEquipmentSpecificationTemplate_Result>("SP_GetRigEquipmentSpecificationTemplate");
        }
    
        public virtual int SP_GetRolesByRig(string rIG)
        {
            var rIGParameter = rIG != null ?
                new ObjectParameter("RIG", rIG) :
                new ObjectParameter("RIG", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetRolesByRig", rIGParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int SP_Insert_RAMSManual_BMS_TSL_all_rigs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Insert_RAMSManual_BMS_TSL_all_rigs");
        }
    
        public virtual ObjectResult<string> SP_LoadDistinctWellNo(Nullable<Guid> orgUnitID)
        {
            var orgUnitIDParameter = orgUnitID.HasValue ?
                new ObjectParameter("OrgUnitID", orgUnitID) :
                new ObjectParameter("OrgUnitID", typeof(Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_LoadDistinctWellNo", orgUnitIDParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_RigEquipmentOneTimeJob(string cRUD)
        {
            var cRUDParameter = cRUD != null ?
                new ObjectParameter("CRUD", cRUD) :
                new ObjectParameter("CRUD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RigEquipmentOneTimeJob", cRUDParameter);
        }
    
        public virtual int sp_RigEquipmentOTJ_Tasks(string cRUD)
        {
            var cRUDParameter = cRUD != null ?
                new ObjectParameter("CRUD", cRUD) :
                new ObjectParameter("CRUD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RigEquipmentOTJ_Tasks", cRUDParameter);
        }
    
        public virtual ObjectResult<sp_SearchDocuments_Result> sp_SearchDocuments(string cRUD, string rigLst, Nullable<int> assetID, string documentName, string documentTypeID)
        {
            var cRUDParameter = cRUD != null ?
                new ObjectParameter("CRUD", cRUD) :
                new ObjectParameter("CRUD", typeof(string));
    
            var rigLstParameter = rigLst != null ?
                new ObjectParameter("RigLst", rigLst) :
                new ObjectParameter("RigLst", typeof(string));
    
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(int));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var documentTypeIDParameter = documentTypeID != null ?
                new ObjectParameter("DocumentTypeID", documentTypeID) :
                new ObjectParameter("DocumentTypeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SearchDocuments_Result>("sp_SearchDocuments", cRUDParameter, rigLstParameter, assetIDParameter, documentNameParameter, documentTypeIDParameter);
        }
    
        public virtual int SP_SetRigEquipmentFamilyRelations(Nullable<Guid> orgUnitId)
        {
            var orgUnitIdParameter = orgUnitId.HasValue ?
                new ObjectParameter("OrgUnitId", orgUnitId) :
                new ObjectParameter("OrgUnitId", typeof(Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SetRigEquipmentFamilyRelations", orgUnitIdParameter);
        }
    
        public virtual int SP_SumMorningReportFieldsByLatestWell(Nullable<DateTime> endDate, Nullable<Guid> orgUnitID, ObjectParameter p06HrsDepthSUM, ObjectParameter p24HrsDepthSUM, ObjectParameter fTGLast24HrsSUM, ObjectParameter repairDaysSum)
        {
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(DateTime));
    
            var orgUnitIDParameter = orgUnitID.HasValue ?
                new ObjectParameter("OrgUnitID", orgUnitID) :
                new ObjectParameter("OrgUnitID", typeof(Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SumMorningReportFieldsByLatestWell", endDateParameter, orgUnitIDParameter, p06HrsDepthSUM, p24HrsDepthSUM, fTGLast24HrsSUM, repairDaysSum);
        }
    
        public virtual ObjectResult<SP_SwapRigEquipment_Result> SP_SwapRigEquipment(Nullable<Guid> orgUnitID, Nullable<Guid> originalEquipment, Nullable<Guid> swapEquipment, ObjectParameter returnEquipmentName, ObjectParameter returnIsSpare)
        {
            var orgUnitIDParameter = orgUnitID.HasValue ?
                new ObjectParameter("OrgUnitID", orgUnitID) :
                new ObjectParameter("OrgUnitID", typeof(Guid));
    
            var originalEquipmentParameter = originalEquipment.HasValue ?
                new ObjectParameter("OriginalEquipment", originalEquipment) :
                new ObjectParameter("OriginalEquipment", typeof(Guid));
    
            var swapEquipmentParameter = swapEquipment.HasValue ?
                new ObjectParameter("SwapEquipment", swapEquipment) :
                new ObjectParameter("SwapEquipment", typeof(Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SwapRigEquipment_Result>("SP_SwapRigEquipment", orgUnitIDParameter, originalEquipmentParameter, swapEquipmentParameter, returnEquipmentName, returnIsSpare);
        }
    
        public virtual int SP_UpdateJobDateORJobHours(Nullable<Guid> rigEquipmentScheduleJobsID, Nullable<DateTime> jobDate, Nullable<DateTime> jobAlertDate, Nullable<DateTime> jobOverDueDate, Nullable<double> jobMeterHours)
        {
            var rigEquipmentScheduleJobsIDParameter = rigEquipmentScheduleJobsID.HasValue ?
                new ObjectParameter("RigEquipmentScheduleJobsID", rigEquipmentScheduleJobsID) :
                new ObjectParameter("RigEquipmentScheduleJobsID", typeof(Guid));
    
            var jobDateParameter = jobDate.HasValue ?
                new ObjectParameter("JobDate", jobDate) :
                new ObjectParameter("JobDate", typeof(DateTime));
    
            var jobAlertDateParameter = jobAlertDate.HasValue ?
                new ObjectParameter("JobAlertDate", jobAlertDate) :
                new ObjectParameter("JobAlertDate", typeof(DateTime));
    
            var jobOverDueDateParameter = jobOverDueDate.HasValue ?
                new ObjectParameter("JobOverDueDate", jobOverDueDate) :
                new ObjectParameter("JobOverDueDate", typeof(DateTime));
    
            var jobMeterHoursParameter = jobMeterHours.HasValue ?
                new ObjectParameter("JobMeterHours", jobMeterHours) :
                new ObjectParameter("JobMeterHours", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateJobDateORJobHours", rigEquipmentScheduleJobsIDParameter, jobDateParameter, jobAlertDateParameter, jobOverDueDateParameter, jobMeterHoursParameter);
        }
    
        public virtual int SP_UpdateOnlineStatusInSecUser(string loginID, Nullable<bool> exit)
        {
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var exitParameter = exit.HasValue ?
                new ObjectParameter("Exit", exit) :
                new ObjectParameter("Exit", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateOnlineStatusInSecUser", loginIDParameter, exitParameter);
        }
    
        public virtual int SP_UpdateRigEquipmentSchedulesAndJobs(Nullable<Guid> rigEquipScheduleID, Nullable<bool> isSuspend)
        {
            var rigEquipScheduleIDParameter = rigEquipScheduleID.HasValue ?
                new ObjectParameter("RigEquipScheduleID", rigEquipScheduleID) :
                new ObjectParameter("RigEquipScheduleID", typeof(Guid));
    
            var isSuspendParameter = isSuspend.HasValue ?
                new ObjectParameter("IsSuspend", isSuspend) :
                new ObjectParameter("IsSuspend", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateRigEquipmentSchedulesAndJobs", rigEquipScheduleIDParameter, isSuspendParameter);
        }
    
        public virtual int SP_UpdateRigEquipmentSpecificationTemplate(Nullable<Guid> rigEquipmentSpecificationTemplateID, string equipmentValue)
        {
            var rigEquipmentSpecificationTemplateIDParameter = rigEquipmentSpecificationTemplateID.HasValue ?
                new ObjectParameter("rigEquipmentSpecificationTemplateID", rigEquipmentSpecificationTemplateID) :
                new ObjectParameter("rigEquipmentSpecificationTemplateID", typeof(Guid));
    
            var equipmentValueParameter = equipmentValue != null ?
                new ObjectParameter("equipmentValue", equipmentValue) :
                new ObjectParameter("equipmentValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateRigEquipmentSpecificationTemplate", rigEquipmentSpecificationTemplateIDParameter, equipmentValueParameter);
        }
    
        public virtual int SP_UpdateTemplateValue()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateTemplateValue");
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int spCloseInspection(Nullable<Guid> jobID)
        {
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("jobID", jobID) :
                new ObjectParameter("jobID", typeof(Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCloseInspection", jobIDParameter);
        }
    
        public virtual int spCopyEquipmentSchedule(Nullable<Guid> pEquipmentID, Nullable<Guid> pEquipmentScheduleID, string pLoginid)
        {
            var pEquipmentIDParameter = pEquipmentID.HasValue ?
                new ObjectParameter("pEquipmentID", pEquipmentID) :
                new ObjectParameter("pEquipmentID", typeof(Guid));
    
            var pEquipmentScheduleIDParameter = pEquipmentScheduleID.HasValue ?
                new ObjectParameter("pEquipmentScheduleID", pEquipmentScheduleID) :
                new ObjectParameter("pEquipmentScheduleID", typeof(Guid));
    
            var pLoginidParameter = pLoginid != null ?
                new ObjectParameter("pLoginid", pLoginid) :
                new ObjectParameter("pLoginid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCopyEquipmentSchedule", pEquipmentIDParameter, pEquipmentScheduleIDParameter, pLoginidParameter);
        }
    
        public virtual int spCreateEquipmentScheduleAndCopyToRigEqSchdl(Nullable<Guid> pEquipmentScheduleID, string pEquipmentID)
        {
            var pEquipmentScheduleIDParameter = pEquipmentScheduleID.HasValue ?
                new ObjectParameter("pEquipmentScheduleID", pEquipmentScheduleID) :
                new ObjectParameter("pEquipmentScheduleID", typeof(Guid));
    
            var pEquipmentIDParameter = pEquipmentID != null ?
                new ObjectParameter("pEquipmentID", pEquipmentID) :
                new ObjectParameter("pEquipmentID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateEquipmentScheduleAndCopyToRigEqSchdl", pEquipmentScheduleIDParameter, pEquipmentIDParameter);
        }
    
        public virtual int spCreateRAMSAlert(string pAlertMessage, Nullable<Guid> pEquipmentDocumentID, Nullable<Guid> pEquipmentID, Nullable<Guid> pRigEquipmentID, string pCreatedBy)
        {
            var pAlertMessageParameter = pAlertMessage != null ?
                new ObjectParameter("pAlertMessage", pAlertMessage) :
                new ObjectParameter("pAlertMessage", typeof(string));
    
            var pEquipmentDocumentIDParameter = pEquipmentDocumentID.HasValue ?
                new ObjectParameter("pEquipmentDocumentID", pEquipmentDocumentID) :
                new ObjectParameter("pEquipmentDocumentID", typeof(Guid));
    
            var pEquipmentIDParameter = pEquipmentID.HasValue ?
                new ObjectParameter("pEquipmentID", pEquipmentID) :
                new ObjectParameter("pEquipmentID", typeof(Guid));
    
            var pRigEquipmentIDParameter = pRigEquipmentID.HasValue ?
                new ObjectParameter("pRigEquipmentID", pRigEquipmentID) :
                new ObjectParameter("pRigEquipmentID", typeof(Guid));
    
            var pCreatedByParameter = pCreatedBy != null ?
                new ObjectParameter("pCreatedBy", pCreatedBy) :
                new ObjectParameter("pCreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateRAMSAlert", pAlertMessageParameter, pEquipmentDocumentIDParameter, pEquipmentIDParameter, pRigEquipmentIDParameter, pCreatedByParameter);
        }
    
        public virtual ObjectResult<Nullable<Guid>> spCreateRigEquipment(Nullable<Guid> pOrgUnitID, Nullable<Guid> pEquipmentID, string pLoginid)
        {
            var pOrgUnitIDParameter = pOrgUnitID.HasValue ?
                new ObjectParameter("pOrgUnitID", pOrgUnitID) :
                new ObjectParameter("pOrgUnitID", typeof(Guid));
    
            var pEquipmentIDParameter = pEquipmentID.HasValue ?
                new ObjectParameter("pEquipmentID", pEquipmentID) :
                new ObjectParameter("pEquipmentID", typeof(Guid));
    
            var pLoginidParameter = pLoginid != null ?
                new ObjectParameter("pLoginid", pLoginid) :
                new ObjectParameter("pLoginid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<Guid>>("spCreateRigEquipment", pOrgUnitIDParameter, pEquipmentIDParameter, pLoginidParameter);
        }
    
        public virtual ObjectResult<spDailyActivityReportStatus_Result> spDailyActivityReportStatus(string pCountryName)
        {
            var pCountryNameParameter = pCountryName != null ?
                new ObjectParameter("pCountryName", pCountryName) :
                new ObjectParameter("pCountryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDailyActivityReportStatus_Result>("spDailyActivityReportStatus", pCountryNameParameter);
        }
    
        public virtual ObjectResult<spDailyOPeration_WithRig_Result> spDailyOPeration_WithRig(Nullable<int> rig)
        {
            var rigParameter = rig.HasValue ?
                new ObjectParameter("rig", rig) :
                new ObjectParameter("rig", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDailyOPeration_WithRig_Result>("spDailyOPeration_WithRig", rigParameter);
        }
    
        public virtual ObjectResult<spDailyOperationSummaryCheck_Result> spDailyOperationSummaryCheck()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDailyOperationSummaryCheck_Result>("spDailyOperationSummaryCheck");
        }
    
        public virtual int spDeleteEquipmentDocument(Nullable<Guid> pDocumentID)
        {
            var pDocumentIDParameter = pDocumentID.HasValue ?
                new ObjectParameter("pDocumentID", pDocumentID) :
                new ObjectParameter("pDocumentID", typeof(Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteEquipmentDocument", pDocumentIDParameter);
        }
    
        public virtual ObjectResult<spGetBasicDashboard_Result> spGetBasicDashboard()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetBasicDashboard_Result>("spGetBasicDashboard");
        }
    
        public virtual int spGetChangeNotifications()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetChangeNotifications");
        }
    
        public virtual ObjectResult<spGetEquipmentByName_Result> spGetEquipmentByName(string pEquipmentName)
        {
            var pEquipmentNameParameter = pEquipmentName != null ?
                new ObjectParameter("pEquipmentName", pEquipmentName) :
                new ObjectParameter("pEquipmentName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEquipmentByName_Result>("spGetEquipmentByName", pEquipmentNameParameter);
        }
    
        public virtual ObjectResult<spGetReportTabs_Result> spGetReportTabs(string pLoginID)
        {
            var pLoginIDParameter = pLoginID != null ?
                new ObjectParameter("pLoginID", pLoginID) :
                new ObjectParameter("pLoginID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetReportTabs_Result>("spGetReportTabs", pLoginIDParameter);
        }
    
        public virtual ObjectResult<spGetRigGeoLocations_Result> spGetRigGeoLocations()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetRigGeoLocations_Result>("spGetRigGeoLocations");
        }
    
        public virtual int spInsertRigEquipmentDocuments(Nullable<int> pUniqueID, string pDocumentName, string pDocumentType, string pDocumentLink, string pDocumentSharePointID)
        {
            var pUniqueIDParameter = pUniqueID.HasValue ?
                new ObjectParameter("pUniqueID", pUniqueID) :
                new ObjectParameter("pUniqueID", typeof(int));
    
            var pDocumentNameParameter = pDocumentName != null ?
                new ObjectParameter("pDocumentName", pDocumentName) :
                new ObjectParameter("pDocumentName", typeof(string));
    
            var pDocumentTypeParameter = pDocumentType != null ?
                new ObjectParameter("pDocumentType", pDocumentType) :
                new ObjectParameter("pDocumentType", typeof(string));
    
            var pDocumentLinkParameter = pDocumentLink != null ?
                new ObjectParameter("pDocumentLink", pDocumentLink) :
                new ObjectParameter("pDocumentLink", typeof(string));
    
            var pDocumentSharePointIDParameter = pDocumentSharePointID != null ?
                new ObjectParameter("pDocumentSharePointID", pDocumentSharePointID) :
                new ObjectParameter("pDocumentSharePointID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertRigEquipmentDocuments", pUniqueIDParameter, pDocumentNameParameter, pDocumentTypeParameter, pDocumentLinkParameter, pDocumentSharePointIDParameter);
        }
    
        public virtual ObjectResult<spJobsCompletedPercentByRigs_Result> spJobsCompletedPercentByRigs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spJobsCompletedPercentByRigs_Result>("spJobsCompletedPercentByRigs");
        }
    
        public virtual int spJobsCompletedPMsPercentByRigDateSpan(string rigNamePara, Nullable<DateTime> cDateParaFrom, Nullable<DateTime> cDateParaTo, string sortColPara)
        {
            var rigNameParaParameter = rigNamePara != null ?
                new ObjectParameter("rigNamePara", rigNamePara) :
                new ObjectParameter("rigNamePara", typeof(string));
    
            var cDateParaFromParameter = cDateParaFrom.HasValue ?
                new ObjectParameter("cDateParaFrom", cDateParaFrom) :
                new ObjectParameter("cDateParaFrom", typeof(DateTime));
    
            var cDateParaToParameter = cDateParaTo.HasValue ?
                new ObjectParameter("cDateParaTo", cDateParaTo) :
                new ObjectParameter("cDateParaTo", typeof(DateTime));
    
            var sortColParaParameter = sortColPara != null ?
                new ObjectParameter("sortColPara", sortColPara) :
                new ObjectParameter("sortColPara", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spJobsCompletedPMsPercentByRigDateSpan", rigNameParaParameter, cDateParaFromParameter, cDateParaToParameter, sortColParaParameter);
        }
    
        public virtual ObjectResult<spJobsOverduePercentByYear_Result> spJobsOverduePercentByYear(string year)
        {
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spJobsOverduePercentByYear_Result>("spJobsOverduePercentByYear", yearParameter);
        }
    
        public virtual ObjectResult<spJobsOverduePMsByDate_Result> spJobsOverduePMsByDate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spJobsOverduePMsByDate_Result>("spJobsOverduePMsByDate");
        }
    
        public virtual ObjectResult<spMonthlyRigJobReport_Result> spMonthlyRigJobReport(string pRigName)
        {
            var pRigNameParameter = pRigName != null ?
                new ObjectParameter("pRigName", pRigName) :
                new ObjectParameter("pRigName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spMonthlyRigJobReport_Result>("spMonthlyRigJobReport", pRigNameParameter);
        }
    
        public virtual ObjectResult<spNewMonthlyRigJobReport_Result> spNewMonthlyRigJobReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spNewMonthlyRigJobReport_Result>("spNewMonthlyRigJobReport");
        }
    
        public virtual int spPMFormsWithEquipmentNameConflicts_Resolve()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPMFormsWithEquipmentNameConflicts_Resolve");
        }
    
        public virtual ObjectResult<Nullable<Guid>> spPMProcedureCopy(Nullable<Guid> pPMProcedureID, string pLoginid)
        {
            var pPMProcedureIDParameter = pPMProcedureID.HasValue ?
                new ObjectParameter("pPMProcedureID", pPMProcedureID) :
                new ObjectParameter("pPMProcedureID", typeof(Guid));
    
            var pLoginidParameter = pLoginid != null ?
                new ObjectParameter("pLoginid", pLoginid) :
                new ObjectParameter("pLoginid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<Guid>>("spPMProcedureCopy", pPMProcedureIDParameter, pLoginidParameter);
        }
    
        public virtual ObjectResult<string> spro_GetDocumentDetails(string cRUD, string wHERE)
        {
            var cRUDParameter = cRUD != null ?
                new ObjectParameter("CRUD", cRUD) :
                new ObjectParameter("CRUD", typeof(string));
    
            var wHEREParameter = wHERE != null ?
                new ObjectParameter("WHERE", wHERE) :
                new ObjectParameter("WHERE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spro_GetDocumentDetails", cRUDParameter, wHEREParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spro_RigEq_18Month_OverHaulPlanDetail(string cRUD, string wHERE, Nullable<Guid> rigEquipmentPlanID, Nullable<Guid> rigEquipmentID, Nullable<Guid> overHaulType, Nullable<int> assetID, Nullable<Guid> rigEqUnscheduledRepairsID, Nullable<decimal> estimatedBudget, Nullable<DateTime> createdOn, string createdBy, string updatedBy)
        {
            var cRUDParameter = cRUD != null ?
                new ObjectParameter("CRUD", cRUD) :
                new ObjectParameter("CRUD", typeof(string));
    
            var wHEREParameter = wHERE != null ?
                new ObjectParameter("WHERE", wHERE) :
                new ObjectParameter("WHERE", typeof(string));
    
            var rigEquipmentPlanIDParameter = rigEquipmentPlanID.HasValue ?
                new ObjectParameter("RigEquipmentPlanID", rigEquipmentPlanID) :
                new ObjectParameter("RigEquipmentPlanID", typeof(Guid));
    
            var rigEquipmentIDParameter = rigEquipmentID.HasValue ?
                new ObjectParameter("RigEquipmentID", rigEquipmentID) :
                new ObjectParameter("RigEquipmentID", typeof(Guid));
    
            var overHaulTypeParameter = overHaulType.HasValue ?
                new ObjectParameter("OverHaulType", overHaulType) :
                new ObjectParameter("OverHaulType", typeof(Guid));
    
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(int));
    
            var rigEqUnscheduledRepairsIDParameter = rigEqUnscheduledRepairsID.HasValue ?
                new ObjectParameter("RigEqUnscheduledRepairsID", rigEqUnscheduledRepairsID) :
                new ObjectParameter("RigEqUnscheduledRepairsID", typeof(Guid));
    
            var estimatedBudgetParameter = estimatedBudget.HasValue ?
                new ObjectParameter("EstimatedBudget", estimatedBudget) :
                new ObjectParameter("EstimatedBudget", typeof(decimal));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spro_RigEq_18Month_OverHaulPlanDetail", cRUDParameter, wHEREParameter, rigEquipmentPlanIDParameter, rigEquipmentIDParameter, overHaulTypeParameter, assetIDParameter, rigEqUnscheduledRepairsIDParameter, estimatedBudgetParameter, createdOnParameter, createdByParameter, updatedByParameter);
        }
    
        public virtual int spro_RigEq_18MonthsPlan(string cRUD, string wHERE, Nullable<Guid> rigEquipmentPlanID, Nullable<Guid> orgUnitID, Nullable<Guid> rigEquipScheduleID, string scheduleBasis, Nullable<int> interval, Nullable<bool> isActive, Nullable<bool> isDepreciated, Nullable<DateTime> createdOn, string createdBy, string updatedBy)
        {
            var cRUDParameter = cRUD != null ?
                new ObjectParameter("CRUD", cRUD) :
                new ObjectParameter("CRUD", typeof(string));
    
            var wHEREParameter = wHERE != null ?
                new ObjectParameter("WHERE", wHERE) :
                new ObjectParameter("WHERE", typeof(string));
    
            var rigEquipmentPlanIDParameter = rigEquipmentPlanID.HasValue ?
                new ObjectParameter("RigEquipmentPlanID", rigEquipmentPlanID) :
                new ObjectParameter("RigEquipmentPlanID", typeof(Guid));
    
            var orgUnitIDParameter = orgUnitID.HasValue ?
                new ObjectParameter("OrgUnitID", orgUnitID) :
                new ObjectParameter("OrgUnitID", typeof(Guid));
    
            var rigEquipScheduleIDParameter = rigEquipScheduleID.HasValue ?
                new ObjectParameter("RigEquipScheduleID", rigEquipScheduleID) :
                new ObjectParameter("RigEquipScheduleID", typeof(Guid));
    
            var scheduleBasisParameter = scheduleBasis != null ?
                new ObjectParameter("ScheduleBasis", scheduleBasis) :
                new ObjectParameter("ScheduleBasis", typeof(string));
    
            var intervalParameter = interval.HasValue ?
                new ObjectParameter("Interval", interval) :
                new ObjectParameter("Interval", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var isDepreciatedParameter = isDepreciated.HasValue ?
                new ObjectParameter("IsDepreciated", isDepreciated) :
                new ObjectParameter("IsDepreciated", typeof(bool));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spro_RigEq_18MonthsPlan", cRUDParameter, wHEREParameter, rigEquipmentPlanIDParameter, orgUnitIDParameter, rigEquipScheduleIDParameter, scheduleBasisParameter, intervalParameter, isActiveParameter, isDepreciatedParameter, createdOnParameter, createdByParameter, updatedByParameter);
        }
    
        public virtual int spro_RigEq_18MonthsPlanDetails(string cRUD, string wHERE, Nullable<Guid> rigEq_PlanDetailsID, Nullable<Guid> rigEquipmentPlanID, Nullable<Guid> rigEquipmentScheduleJobsID, Nullable<DateTime> jobPlanDate, Nullable<int> sequence, Nullable<DateTime> createdOn, string createdBy, string updatedBy)
        {
            var cRUDParameter = cRUD != null ?
                new ObjectParameter("CRUD", cRUD) :
                new ObjectParameter("CRUD", typeof(string));
    
            var wHEREParameter = wHERE != null ?
                new ObjectParameter("WHERE", wHERE) :
                new ObjectParameter("WHERE", typeof(string));
    
            var rigEq_PlanDetailsIDParameter = rigEq_PlanDetailsID.HasValue ?
                new ObjectParameter("RigEq_PlanDetailsID", rigEq_PlanDetailsID) :
                new ObjectParameter("RigEq_PlanDetailsID", typeof(Guid));
    
            var rigEquipmentPlanIDParameter = rigEquipmentPlanID.HasValue ?
                new ObjectParameter("RigEquipmentPlanID", rigEquipmentPlanID) :
                new ObjectParameter("RigEquipmentPlanID", typeof(Guid));
    
            var rigEquipmentScheduleJobsIDParameter = rigEquipmentScheduleJobsID.HasValue ?
                new ObjectParameter("RigEquipmentScheduleJobsID", rigEquipmentScheduleJobsID) :
                new ObjectParameter("RigEquipmentScheduleJobsID", typeof(Guid));
    
            var jobPlanDateParameter = jobPlanDate.HasValue ?
                new ObjectParameter("JobPlanDate", jobPlanDate) :
                new ObjectParameter("JobPlanDate", typeof(DateTime));
    
            var sequenceParameter = sequence.HasValue ?
                new ObjectParameter("Sequence", sequence) :
                new ObjectParameter("Sequence", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(DateTime));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var updatedByParameter = updatedBy != null ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spro_RigEq_18MonthsPlanDetails", cRUDParameter, wHEREParameter, rigEq_PlanDetailsIDParameter, rigEquipmentPlanIDParameter, rigEquipmentScheduleJobsIDParameter, jobPlanDateParameter, sequenceParameter, createdOnParameter, createdByParameter, updatedByParameter);
        }
    
        public virtual ObjectResult<spro_RigEquipmentsOptimised_Result> spro_RigEquipmentsOptimised(string cRUD, string wHERE, Nullable<Guid> orgUnitID, Nullable<bool> isKeyEquipment, string hasValuetype)
        {
            var cRUDParameter = cRUD != null ?
                new ObjectParameter("CRUD", cRUD) :
                new ObjectParameter("CRUD", typeof(string));
    
            var wHEREParameter = wHERE != null ?
                new ObjectParameter("WHERE", wHERE) :
                new ObjectParameter("WHERE", typeof(string));
    
            var orgUnitIDParameter = orgUnitID.HasValue ?
                new ObjectParameter("OrgUnitID", orgUnitID) :
                new ObjectParameter("OrgUnitID", typeof(Guid));
    
            var isKeyEquipmentParameter = isKeyEquipment.HasValue ?
                new ObjectParameter("IsKeyEquipment", isKeyEquipment) :
                new ObjectParameter("IsKeyEquipment", typeof(bool));
    
            var hasValuetypeParameter = hasValuetype != null ?
                new ObjectParameter("HasValuetype", hasValuetype) :
                new ObjectParameter("HasValuetype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spro_RigEquipmentsOptimised_Result>("spro_RigEquipmentsOptimised", cRUDParameter, wHEREParameter, orgUnitIDParameter, isKeyEquipmentParameter, hasValuetypeParameter);
        }
    
        public virtual int spro_UserDashboard(string cRUD, string wHERE, string loginID, string roleIDs, Nullable<Guid> currentRoleID)
        {
            var cRUDParameter = cRUD != null ?
                new ObjectParameter("CRUD", cRUD) :
                new ObjectParameter("CRUD", typeof(string));
    
            var wHEREParameter = wHERE != null ?
                new ObjectParameter("WHERE", wHERE) :
                new ObjectParameter("WHERE", typeof(string));
    
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var roleIDsParameter = roleIDs != null ?
                new ObjectParameter("RoleIDs", roleIDs) :
                new ObjectParameter("RoleIDs", typeof(string));
    
            var currentRoleIDParameter = currentRoleID.HasValue ?
                new ObjectParameter("CurrentRoleID", currentRoleID) :
                new ObjectParameter("CurrentRoleID", typeof(Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spro_UserDashboard", cRUDParameter, wHEREParameter, loginIDParameter, roleIDsParameter, currentRoleIDParameter);
        }
    
        public virtual int spSetRigEquipmentScheduleAsPerRigStatus(Nullable<Guid> pOrgUnitID, Nullable<Guid> equipmentID, Nullable<Guid> rigEquipmentID)
        {
            var pOrgUnitIDParameter = pOrgUnitID.HasValue ?
                new ObjectParameter("pOrgUnitID", pOrgUnitID) :
                new ObjectParameter("pOrgUnitID", typeof(Guid));
    
            var equipmentIDParameter = equipmentID.HasValue ?
                new ObjectParameter("EquipmentID", equipmentID) :
                new ObjectParameter("EquipmentID", typeof(Guid));
    
            var rigEquipmentIDParameter = rigEquipmentID.HasValue ?
                new ObjectParameter("RigEquipmentID", rigEquipmentID) :
                new ObjectParameter("RigEquipmentID", typeof(Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSetRigEquipmentScheduleAsPerRigStatus", pOrgUnitIDParameter, equipmentIDParameter, rigEquipmentIDParameter);
        }
    
        public virtual int spUpdate(string flag, string entryID, string description, string certNo, Nullable<DateTime> dateReceived, Nullable<DateTime> datePlacedInService, Nullable<DateTime> lastInspection, Nullable<DateTime> nextInspection, string pONo, Nullable<DateTime> dateRemovedFromService, string sAPNo, string sWL, string manufacturer, Nullable<Guid> orgUnitID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var entryIDParameter = entryID != null ?
                new ObjectParameter("EntryID", entryID) :
                new ObjectParameter("EntryID", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var certNoParameter = certNo != null ?
                new ObjectParameter("CertNo", certNo) :
                new ObjectParameter("CertNo", typeof(string));
    
            var dateReceivedParameter = dateReceived.HasValue ?
                new ObjectParameter("DateReceived", dateReceived) :
                new ObjectParameter("DateReceived", typeof(DateTime));
    
            var datePlacedInServiceParameter = datePlacedInService.HasValue ?
                new ObjectParameter("DatePlacedInService", datePlacedInService) :
                new ObjectParameter("DatePlacedInService", typeof(DateTime));
    
            var lastInspectionParameter = lastInspection.HasValue ?
                new ObjectParameter("LastInspection", lastInspection) :
                new ObjectParameter("LastInspection", typeof(DateTime));
    
            var nextInspectionParameter = nextInspection.HasValue ?
                new ObjectParameter("NextInspection", nextInspection) :
                new ObjectParameter("NextInspection", typeof(DateTime));
    
            var pONoParameter = pONo != null ?
                new ObjectParameter("PONo", pONo) :
                new ObjectParameter("PONo", typeof(string));
    
            var dateRemovedFromServiceParameter = dateRemovedFromService.HasValue ?
                new ObjectParameter("DateRemovedFromService", dateRemovedFromService) :
                new ObjectParameter("DateRemovedFromService", typeof(DateTime));
    
            var sAPNoParameter = sAPNo != null ?
                new ObjectParameter("SAPNo", sAPNo) :
                new ObjectParameter("SAPNo", typeof(string));
    
            var sWLParameter = sWL != null ?
                new ObjectParameter("SWL", sWL) :
                new ObjectParameter("SWL", typeof(string));
    
            var manufacturerParameter = manufacturer != null ?
                new ObjectParameter("Manufacturer", manufacturer) :
                new ObjectParameter("Manufacturer", typeof(string));
    
            var orgUnitIDParameter = orgUnitID.HasValue ?
                new ObjectParameter("OrgUnitID", orgUnitID) :
                new ObjectParameter("OrgUnitID", typeof(Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdate", flagParameter, entryIDParameter, descriptionParameter, certNoParameter, dateReceivedParameter, datePlacedInServiceParameter, lastInspectionParameter, nextInspectionParameter, pONoParameter, dateRemovedFromServiceParameter, sAPNoParameter, sWLParameter, manufacturerParameter, orgUnitIDParameter);
        }
    
        public virtual int spUpdateRigCertificateNoByRigEquipmentID(Nullable<Guid> pRigEquipmentId, string pCertNo, Nullable<int> pCatNo, Nullable<DateTime> pDate)
        {
            var pRigEquipmentIdParameter = pRigEquipmentId.HasValue ?
                new ObjectParameter("pRigEquipmentId", pRigEquipmentId) :
                new ObjectParameter("pRigEquipmentId", typeof(Guid));
    
            var pCertNoParameter = pCertNo != null ?
                new ObjectParameter("pCertNo", pCertNo) :
                new ObjectParameter("pCertNo", typeof(string));
    
            var pCatNoParameter = pCatNo.HasValue ?
                new ObjectParameter("pCatNo", pCatNo) :
                new ObjectParameter("pCatNo", typeof(int));
    
            var pDateParameter = pDate.HasValue ?
                new ObjectParameter("pDate", pDate) :
                new ObjectParameter("pDate", typeof(DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateRigCertificateNoByRigEquipmentID", pRigEquipmentIdParameter, pCertNoParameter, pCatNoParameter, pDateParameter);
        }
    
        public virtual ObjectResult<spUserReport_Result> spUserReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spUserReport_Result>("spUserReport");
        }
    
        public virtual ObjectResult<string> support_ChangeSpecName(string arg, string changeVal, string type)
        {
            var argParameter = arg != null ?
                new ObjectParameter("Arg", arg) :
                new ObjectParameter("Arg", typeof(string));
    
            var changeValParameter = changeVal != null ?
                new ObjectParameter("ChangeVal", changeVal) :
                new ObjectParameter("ChangeVal", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("support_ChangeSpecName", argParameter, changeValParameter, typeParameter);
        }
    
        public virtual ObjectResult<string> support_ChangeUserRig(string userId, string rigNo)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var rigNoParameter = rigNo != null ?
                new ObjectParameter("RigNo", rigNo) :
                new ObjectParameter("RigNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("support_ChangeUserRig", userIdParameter, rigNoParameter);
        }
    
        public virtual int support_CopytoRigStatusLog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("support_CopytoRigStatusLog");
        }
    
        public virtual int support_CorrectOneTimeJob(Nullable<Guid> oneTimeJobId)
        {
            var oneTimeJobIdParameter = oneTimeJobId.HasValue ?
                new ObjectParameter("OneTimeJobId", oneTimeJobId) :
                new ObjectParameter("OneTimeJobId", typeof(Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("support_CorrectOneTimeJob", oneTimeJobIdParameter);
        }
    
        public virtual int support_DeleteEquipmentMarkedAsDelete()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("support_DeleteEquipmentMarkedAsDelete");
        }
    
        public virtual ObjectResult<support_FindCasesWhereAfterAckOriginalJobScrewed_Result> support_FindCasesWhereAfterAckOriginalJobScrewed()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<support_FindCasesWhereAfterAckOriginalJobScrewed_Result>("support_FindCasesWhereAfterAckOriginalJobScrewed");
        }
    
        public virtual ObjectResult<support_FindPMSUnackedBySeniorToolPusher_Result> support_FindPMSUnackedBySeniorToolPusher(string rigNo)
        {
            var rigNoParameter = rigNo != null ?
                new ObjectParameter("RigNo", rigNo) :
                new ObjectParameter("RigNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<support_FindPMSUnackedBySeniorToolPusher_Result>("support_FindPMSUnackedBySeniorToolPusher", rigNoParameter);
        }
    
        public virtual int support_FixCasesWhereMultiAckTasksForToolPusher()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("support_FixCasesWhereMultiAckTasksForToolPusher");
        }
    
        public virtual int support_FixCasesWherePMAckedAndSTPJobIsIncomplete()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("support_FixCasesWherePMAckedAndSTPJobIsIncomplete");
        }
    
        public virtual ObjectResult<string> support_FunctionStartDateAndJobRescheduling(string rigNo, string type)
        {
            var rigNoParameter = rigNo != null ?
                new ObjectParameter("RigNo", rigNo) :
                new ObjectParameter("RigNo", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("support_FunctionStartDateAndJobRescheduling", rigNoParameter, typeParameter);
        }
    
        public virtual ObjectResult<support_GetDataForPMsAndMorningReportByRig_Result> support_GetDataForPMsAndMorningReportByRig(string uSerId)
        {
            var uSerIdParameter = uSerId != null ?
                new ObjectParameter("USerId", uSerId) :
                new ObjectParameter("USerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<support_GetDataForPMsAndMorningReportByRig_Result>("support_GetDataForPMsAndMorningReportByRig", uSerIdParameter);
        }
    
        public virtual ObjectResult<support_GetRigUserList_Result> support_GetRigUserList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<support_GetRigUserList_Result>("support_GetRigUserList");
        }
    
        public virtual ObjectResult<support_MapFormDefToData_Result> support_MapFormDefToData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<support_MapFormDefToData_Result>("support_MapFormDefToData");
        }
    
        public virtual int support_MigrateDocumentsAsPerNewStructure()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("support_MigrateDocumentsAsPerNewStructure");
        }
    
        public virtual int support_RemoveSchedularJunk()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("support_RemoveSchedularJunk");
        }
    
        public virtual ObjectResult<string> support_ReplaceMake(string source, string target, string type)
        {
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var targetParameter = target != null ?
                new ObjectParameter("Target", target) :
                new ObjectParameter("Target", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("support_ReplaceMake", sourceParameter, targetParameter, typeParameter);
        }
    
        public virtual ObjectResult<string> support_ReplaceModel(string source, string target, string type)
        {
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var targetParameter = target != null ?
                new ObjectParameter("Target", target) :
                new ObjectParameter("Target", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("support_ReplaceModel", sourceParameter, targetParameter, typeParameter);
        }
    
        public virtual ObjectResult<string> support_ReplaceRigEquipmentName(string source, string target, string type)
        {
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var targetParameter = target != null ?
                new ObjectParameter("Target", target) :
                new ObjectParameter("Target", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("support_ReplaceRigEquipmentName", sourceParameter, targetParameter, typeParameter);
        }
    
        public virtual ObjectResult<support_ReplicateSchedule_Result> support_ReplicateSchedule(string familyName, string srcEquipment, string destEquipment)
        {
            var familyNameParameter = familyName != null ?
                new ObjectParameter("FamilyName", familyName) :
                new ObjectParameter("FamilyName", typeof(string));
    
            var srcEquipmentParameter = srcEquipment != null ?
                new ObjectParameter("SrcEquipment", srcEquipment) :
                new ObjectParameter("SrcEquipment", typeof(string));
    
            var destEquipmentParameter = destEquipment != null ?
                new ObjectParameter("DestEquipment", destEquipment) :
                new ObjectParameter("DestEquipment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<support_ReplicateSchedule_Result>("support_ReplicateSchedule", familyNameParameter, srcEquipmentParameter, destEquipmentParameter);
        }
    
        public virtual int support_ReplicateSpecificationAtAllLevels()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("support_ReplicateSpecificationAtAllLevels");
        }
    
        public virtual int support_Reset_Elect_Mech_STP_Pass_Private05()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("support_Reset_Elect_Mech_STP_Pass_Private05");
        }
    
        public virtual ObjectResult<support_RigStatusByRegion_Result> support_RigStatusByRegion()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<support_RigStatusByRegion_Result>("support_RigStatusByRegion");
        }
    
        public virtual int support_SetPasswordExpiryPolicy(Nullable<int> prm)
        {
            var prmParameter = prm.HasValue ?
                new ObjectParameter("Prm", prm) :
                new ObjectParameter("Prm", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("support_SetPasswordExpiryPolicy", prmParameter);
        }
    
        public virtual ObjectResult<support_WhoLastSynced_Result> support_WhoLastSynced(string prm)
        {
            var prmParameter = prm != null ?
                new ObjectParameter("Prm", prm) :
                new ObjectParameter("Prm", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<support_WhoLastSynced_Result>("support_WhoLastSynced", prmParameter);
        }
    
        public virtual ObjectResult<temp_DownloadExistingSch_Result> temp_DownloadExistingSch()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<temp_DownloadExistingSch_Result>("temp_DownloadExistingSch");
        }
    
        public virtual ObjectResult<TestMonthlyActivityReport_Result> TestMonthlyActivityReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TestMonthlyActivityReport_Result>("TestMonthlyActivityReport");
        }
    
        public virtual int Uplaoad_PMFormSEctionPMProcandDiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Uplaoad_PMFormSEctionPMProcandDiagrams");
        }
    
        public virtual ObjectResult<Uplaoad_PMFormSEctionPMProcandDiagramsEx_Result> Uplaoad_PMFormSEctionPMProcandDiagramsEx()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Uplaoad_PMFormSEctionPMProcandDiagramsEx_Result>("Uplaoad_PMFormSEctionPMProcandDiagramsEx");
        }
    
        public virtual int upload_PMProc()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upload_PMProc");
        }
    
        public virtual int usp_AddEquipment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddEquipment");
        }
    
        public virtual int usp_AddNewRig()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AddNewRig");
        }
    
        public virtual int usp_ASsociatePMBasedOnFamily()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ASsociatePMBasedOnFamily");
        }
    
        public virtual ObjectResult<usp_CheckAllActivityForPMandService_Result> usp_CheckAllActivityForPMandService()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CheckAllActivityForPMandService_Result>("usp_CheckAllActivityForPMandService");
        }
    
        public virtual int usp_CleanRougueSchedules(string orgUnit)
        {
            var orgUnitParameter = orgUnit != null ?
                new ObjectParameter("OrgUnit", orgUnit) :
                new ObjectParameter("OrgUnit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CleanRougueSchedules", orgUnitParameter);
        }
    
        public virtual int usp_CloneRig(string fromOrgUnitName, string toOrgUnitName)
        {
            var fromOrgUnitNameParameter = fromOrgUnitName != null ?
                new ObjectParameter("FromOrgUnitName", fromOrgUnitName) :
                new ObjectParameter("FromOrgUnitName", typeof(string));
    
            var toOrgUnitNameParameter = toOrgUnitName != null ?
                new ObjectParameter("ToOrgUnitName", toOrgUnitName) :
                new ObjectParameter("ToOrgUnitName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CloneRig", fromOrgUnitNameParameter, toOrgUnitNameParameter);
        }
    
        public virtual int usp_CreateAllScript()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateAllScript");
        }
    
        public virtual int usp_DeleteDataFromAllTables()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteDataFromAllTables");
        }
    
        public virtual int usp_DeleteEquipment(Nullable<Guid> equipmentId)
        {
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("EquipmentId", equipmentId) :
                new ObjectParameter("EquipmentId", typeof(Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteEquipment", equipmentIdParameter);
        }
    
        public virtual int usp_Doc(string docName, Nullable<Guid> assetID, Nullable<int> categoryNo, Nullable<DateTime> documentDate, string documentNo, string filename)
        {
            var docNameParameter = docName != null ?
                new ObjectParameter("DocName", docName) :
                new ObjectParameter("DocName", typeof(string));
    
            var assetIDParameter = assetID.HasValue ?
                new ObjectParameter("AssetID", assetID) :
                new ObjectParameter("AssetID", typeof(Guid));
    
            var categoryNoParameter = categoryNo.HasValue ?
                new ObjectParameter("CategoryNo", categoryNo) :
                new ObjectParameter("CategoryNo", typeof(int));
    
            var documentDateParameter = documentDate.HasValue ?
                new ObjectParameter("DocumentDate", documentDate) :
                new ObjectParameter("DocumentDate", typeof(DateTime));
    
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Doc", docNameParameter, assetIDParameter, categoryNoParameter, documentDateParameter, documentNoParameter, filenameParameter);
        }
    
        public virtual ObjectResult<usp_DownloadPMServiceForms_Result> usp_DownloadPMServiceForms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DownloadPMServiceForms_Result>("usp_DownloadPMServiceForms");
        }
    
        public virtual int usp_FindNonMatchingSchedulesAcrossFamily()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_FindNonMatchingSchedulesAcrossFamily");
        }
    
        public virtual ObjectResult<usp_GetAllEquipmentBy_Result> usp_GetAllEquipmentBy(string equipmentName, string familyName, string seqNo)
        {
            var equipmentNameParameter = equipmentName != null ?
                new ObjectParameter("EquipmentName", equipmentName) :
                new ObjectParameter("EquipmentName", typeof(string));
    
            var familyNameParameter = familyName != null ?
                new ObjectParameter("FamilyName", familyName) :
                new ObjectParameter("FamilyName", typeof(string));
    
            var seqNoParameter = seqNo != null ?
                new ObjectParameter("SeqNo", seqNo) :
                new ObjectParameter("SeqNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllEquipmentBy_Result>("usp_GetAllEquipmentBy", equipmentNameParameter, familyNameParameter, seqNoParameter);
        }
    
        public virtual ObjectResult<usp_GetAllSchedules_Result> usp_GetAllSchedules(string rigNo)
        {
            var rigNoParameter = rigNo != null ?
                new ObjectParameter("RigNo", rigNo) :
                new ObjectParameter("RigNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllSchedules_Result>("usp_GetAllSchedules", rigNoParameter);
        }
    
        public virtual ObjectResult<usp_GetDataForTranslation_Result> usp_GetDataForTranslation(Nullable<Guid> ruLanguageID, string rvCreatedBy)
        {
            var ruLanguageIDParameter = ruLanguageID.HasValue ?
                new ObjectParameter("ruLanguageID", ruLanguageID) :
                new ObjectParameter("ruLanguageID", typeof(Guid));
    
            var rvCreatedByParameter = rvCreatedBy != null ?
                new ObjectParameter("rvCreatedBy", rvCreatedBy) :
                new ObjectParameter("rvCreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDataForTranslation_Result>("usp_GetDataForTranslation", ruLanguageIDParameter, rvCreatedByParameter);
        }
    
        public virtual ObjectResult<usp_GetDataForTranslation2_Result> usp_GetDataForTranslation2(Nullable<Guid> ruLanguageID, string rvCreatedBy)
        {
            var ruLanguageIDParameter = ruLanguageID.HasValue ?
                new ObjectParameter("ruLanguageID", ruLanguageID) :
                new ObjectParameter("ruLanguageID", typeof(Guid));
    
            var rvCreatedByParameter = rvCreatedBy != null ?
                new ObjectParameter("rvCreatedBy", rvCreatedBy) :
                new ObjectParameter("rvCreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDataForTranslation2_Result>("usp_GetDataForTranslation2", ruLanguageIDParameter, rvCreatedByParameter);
        }
    
        public virtual ObjectResult<usp_GetDiffBetweenTwoPMFormDef_Result> usp_GetDiffBetweenTwoPMFormDef(string p1, string p2, string mode)
        {
            var p1Parameter = p1 != null ?
                new ObjectParameter("p1", p1) :
                new ObjectParameter("p1", typeof(string));
    
            var p2Parameter = p2 != null ?
                new ObjectParameter("p2", p2) :
                new ObjectParameter("p2", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDiffBetweenTwoPMFormDef_Result>("usp_GetDiffBetweenTwoPMFormDef", p1Parameter, p2Parameter, modeParameter);
        }
    
        public virtual ObjectResult<usp_GetUpcomingOverdueTask_Result> usp_GetUpcomingOverdueTask(string argtype, string rig)
        {
            var argtypeParameter = argtype != null ?
                new ObjectParameter("Argtype", argtype) :
                new ObjectParameter("Argtype", typeof(string));
    
            var rigParameter = rig != null ?
                new ObjectParameter("Rig", rig) :
                new ObjectParameter("Rig", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUpcomingOverdueTask_Result>("usp_GetUpcomingOverdueTask", argtypeParameter, rigParameter);
        }
    
        public virtual ObjectResult<usp_helper_CompareEquipmentFamilySchedules_Result> usp_helper_CompareEquipmentFamilySchedules()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_helper_CompareEquipmentFamilySchedules_Result>("usp_helper_CompareEquipmentFamilySchedules");
        }
    
        public virtual ObjectResult<usp_Helper_ListAllSchedules_Result> usp_Helper_ListAllSchedules(string rigNo)
        {
            var rigNoParameter = rigNo != null ?
                new ObjectParameter("RigNo", rigNo) :
                new ObjectParameter("RigNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Helper_ListAllSchedules_Result>("usp_Helper_ListAllSchedules", rigNoParameter);
        }
    
        public virtual int usp_HorizontalizeDiagramMeasurements()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_HorizontalizeDiagramMeasurements");
        }
    
        public virtual int usp_ImportLanguageTranslationFile(string rvFilePath, string rvCreatedBy)
        {
            var rvFilePathParameter = rvFilePath != null ?
                new ObjectParameter("rvFilePath", rvFilePath) :
                new ObjectParameter("rvFilePath", typeof(string));
    
            var rvCreatedByParameter = rvCreatedBy != null ?
                new ObjectParameter("rvCreatedBy", rvCreatedBy) :
                new ObjectParameter("rvCreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ImportLanguageTranslationFile", rvFilePathParameter, rvCreatedByParameter);
        }
    
        public virtual ObjectResult<string> usp_ListAllSchedules(string rigNo, string type)
        {
            var rigNoParameter = rigNo != null ?
                new ObjectParameter("RigNo", rigNo) :
                new ObjectParameter("RigNo", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_ListAllSchedules", rigNoParameter, typeParameter);
        }
    
        public virtual int usp_LoadEquipmentSchedule()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LoadEquipmentSchedule");
        }
    
        public virtual int usp_LoadEquipmentScheduleEx()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LoadEquipmentScheduleEx");
        }
    
        public virtual int usp_LoadPMForms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LoadPMForms");
        }
    
        public virtual int usp_LoadPMFormsEx()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LoadPMFormsEx");
        }
    
        public virtual int usp_MonitorProgress()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MonitorProgress");
        }
    
        public virtual int usp_MonitorProgress24Hours()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MonitorProgress24Hours");
        }
    
        public virtual int usp_MonitorProgress7Days()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MonitorProgress7Days");
        }
    
        public virtual int usp_MonitorProgress7Days_2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_MonitorProgress7Days_2");
        }
    
        public virtual ObjectResult<usp_MonitorProgressLast2Days_Result> usp_MonitorProgressLast2Days()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MonitorProgressLast2Days_Result>("usp_MonitorProgressLast2Days");
        }
    
        public virtual int usp_PIB(string opportunityForIMprovement, string correctiveAction, Nullable<DateTime> correctiveTargetDate, string preventiveAction, Nullable<DateTime> preventiveTargetDate, Nullable<int> addOnly)
        {
            var opportunityForIMprovementParameter = opportunityForIMprovement != null ?
                new ObjectParameter("OpportunityForIMprovement", opportunityForIMprovement) :
                new ObjectParameter("OpportunityForIMprovement", typeof(string));
    
            var correctiveActionParameter = correctiveAction != null ?
                new ObjectParameter("CorrectiveAction", correctiveAction) :
                new ObjectParameter("CorrectiveAction", typeof(string));
    
            var correctiveTargetDateParameter = correctiveTargetDate.HasValue ?
                new ObjectParameter("CorrectiveTargetDate", correctiveTargetDate) :
                new ObjectParameter("CorrectiveTargetDate", typeof(DateTime));
    
            var preventiveActionParameter = preventiveAction != null ?
                new ObjectParameter("PreventiveAction", preventiveAction) :
                new ObjectParameter("PreventiveAction", typeof(string));
    
            var preventiveTargetDateParameter = preventiveTargetDate.HasValue ?
                new ObjectParameter("PreventiveTargetDate", preventiveTargetDate) :
                new ObjectParameter("PreventiveTargetDate", typeof(DateTime));
    
            var addOnlyParameter = addOnly.HasValue ?
                new ObjectParameter("AddOnly", addOnly) :
                new ObjectParameter("AddOnly", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_PIB", opportunityForIMprovementParameter, correctiveActionParameter, correctiveTargetDateParameter, preventiveActionParameter, preventiveTargetDateParameter, addOnlyParameter);
        }
    
        public virtual int usp_SetupTombStone(string rvcTableName)
        {
            var rvcTableNameParameter = rvcTableName != null ?
                new ObjectParameter("rvcTableName", rvcTableName) :
                new ObjectParameter("rvcTableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SetupTombStone", rvcTableNameParameter);
        }
    
        public virtual ObjectResult<usp_StepsForDeletionOfDuplicateEquipment_Result> usp_StepsForDeletionOfDuplicateEquipment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_StepsForDeletionOfDuplicateEquipment_Result>("usp_StepsForDeletionOfDuplicateEquipment");
        }
    
        public virtual int usp_UploadCompletePMFormFinal()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UploadCompletePMFormFinal");
        }
    
        public virtual int usp_UploadRigEquipment()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UploadRigEquipment");
        }
    
        public virtual int usp_UploadRigEquipmentSpecification()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UploadRigEquipmentSpecification");
        }
    }
}
